#include<iostream>
using namespace std;
struct NODE{
    int data; //here as the node is representing the root so just int data
    struct NODE *left; //here as the left will also work as a root so node *left
    struct NODE *right; //here as the right will also work as a root so node *right
};
NODE *createNewNode(int x){
    NODE *newnode=new NODE;
    newnode->data=x;
    newnode->right=NULL;
    newnode->left=NULL;
    return newnode;
}
NODE *insert(NODE *root,int x){
    if(root==NULL){
        return createNewNode(x);
    }
    else if(x<=root->data){
        root->left=insert(root->left,x); //here we will be returning a new root left after insertion, and we update root->left with the result
    }
    else{
        root->right=insert(root->right,x);
        
    }
    return root;
}
NODE *find_min(NODE *root){
    while(root->left!=NULL){
        root=root->left;
    }
    return root;
}
NODE *deletion(NODE *root,int x){
    if(root==NULL){ //if the root is empty or the node to be deleted is not found then just return the root
        return root;
    }
    else if(x<root->data){
        root->left=deletion(root->left,x); //d->left=deletion() is because after deleting the node,it will return a new tree, place that to the left postion (d->lef
    }
    else if(x>root->data){
        root->right=deletion(root->right,x);
    }
    else{
        //here after searching from left or right once we found the element which is x==d->data  we will start the deletion process
        //case 1: no child
        if(root->left==NULL && root->right==NULL){
            delete root;
            root=NULL; //to make sure that deleted node exists no where in this tree
        }
        //case 2: 1 child
        else if(root->left==NULL){
            NODE *temp=root;
            root=root->right;
            delete temp;
        }
        else if(root->right==NULL){
            NODE *temp=root;
            root=root->left;
            delete temp;
        }
        //case 3: 2 child
        else{
            NODE *temp=find_min(root->right); //find the minimum of the right subtree
            root->data=temp->data;  //here we are changing the node to be deleted with the minimum_right one, so two nodes will be of the same amount (both the root and also that minimum_right)
            root->right=deletion(root->right,temp->data);
            //now we will be sending the right node and the temp->data to delete(the duplicate one as we have the root initialised as the same value)
        }
    }
    return root; //finally after deleting the node, lets return the modified one 
}
void Inorder(NODE *root){
    if(root==NULL) return;
    Inorder(root->left); //here after traversing left to left when we finally find the root to be null,that means the left of the root is null, so it will return to its caller which is Inorder(root->left) that root_>left==null and then it will print its next line which is cout<<root->data ,thats how the leftmost element will be printed (it follows a call stack mechanism)
    cout<<root->data<<"\t";
    Inorder(root->right);
}
void Preorder(NODE *root){
    if(root==NULL) return;
    cout<<root->data<<"\t";
    Preorder(root->left);
    Preorder(root->right);
}
void Postorder(NODE *root){
    if(root==NULL) return;
    Postorder(root->left);
    Postorder(root->right);
    cout<<root->data<<"\t";
}

int height(NODE *root){ //from LEAF to X NODE  //down to up
          if(root==NULL) return -1; 

//we will return -1 becuase of the extra edge we are considering the leaf has,like if it were 0,then leaf would have gotten 0+1=1 height,which would have been wrong
          
          int left_height=height(root->left); 

//here we will go through each nodes left and right child, so the leaf will return -1 and in the naswer -1+1=0,
//so the leaf will give 0, which is right as leaf has no height(edge wise), then we will move to leafs parent it will also get which will have 0 as the return int from the leaf
//then we will add +1 so it will give 0+1=1 which is also correct, thats how we will get to each node and finf their heights, and whichever one is the highest will be the ultimate answer
          
          int right_height=height(root->right);
          return left_height>right_height ? left_height+1 : right_height+1;

//or this one return max(left_height,right_height)+1;
}


int depth(NODE *root,int x){ //from ROOT to X NODE //up to down
    if(root==NULL){
        return -1; //node has not being found
    }
    else if(root->data==x){
        return 0; //node found at root, depth is 0
    }
    int left_depth=depth(root->left,x);
        if(left_depth!=-1){ //element does exist, it isnt -1
            return 1+left_depth; //as we just found it in the left child so depth is 0+1=1 from the root
        }
        
    int right_depth=depth(root->right,x);
        if(right_depth!=-1){
            return 1+right_depth;
        }
    
    return -1; //if it is present in none of the trees
}


NODE *Find(NODE *root,int x){
    if(root==NULL || x==root->data) return root;
    if(x<root->data){
        Find(root->left,x);
    }
    else{
        Find(root->right,x);
    }
}

int succ(NODE *root,int x){
        NODE *current=Find(root,x);
        if(current==NULL) return 0; //data could not be found in the tree
        if(current->right!=NULL){ //if has a right subtree then its minimum is the suc 
            NODE *min=find_min(root->right);
            return min->data;
        }
        else{ //if does not have a right subtree
            /*    15
                 /  \
                13  20
               / \
              8  14
            */
            NODE *successor=NULL;
            NODE *ancestor=root; //15
            while(ancestor!=current){ // 15!=14
            if(current->data<ancestor->data){ //14<15, 14<13(no)(break it,go to else)
                successor=ancestor; //suc=15,anc=13
                ancestor=ancestor->left; //anc=13
            }
            else if(current->data>ancestor->data){ //14>13
                ancestor=ancestor->right; //anc=14
            }
        }
            return successor->data; //15 (the inorder suc of 14)
    } 
}


bool isBST(NODE *root,int min,int max){
    if(root==NULL) return true; //we reached till the end while fulfillling the other rules
    else if(root->data < min || root->data >max){
        return false; 
//it means the situation where left is higher or right is lower which is a violation to BST
//after one iteration max=root_data-1, min=root->data+1, and if this min and max doesnt match then the rule will violate
    }
    else{
     return isBST(root->left, min , root->data-1) &&
     isBST(root->right, root->data+1, max);
     //here means in the left subtree minimum can be anything but maximum can not be greater than root (thats why max=root->data-1),same with the right subtree max can vbe anything but min has to be greater than root, and when both are true from every recusion we know its a BST
    }
}
bool BST(NODE *root){
    return isBST(root,INT_MIN,INT_MAX);
}

int main(){
    NODE *root=NULL;
    root=insert(root,50);
    root=insert(root,45);
    root=insert(root,40);
    root=insert(root,35);
    root=insert(root,30);
    root=insert(root,25);
    root=insert(root,20);
    root=insert(root,15);
    root=insert(root,10);
    Inorder(root);
    cout<<endl;
    cout<<"Delete 20:"<<endl;
    root=deletion(root,20);
    Inorder(root);
    cout<<endl;
    cout<<"Delete 40:"<<endl;
    root=deletion(root,40);
    Inorder(root);
    cout<<endl;
    cout<<height(root)<<endl;
    cout<<depth(root,50);
}
