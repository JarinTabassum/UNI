#include<iostream>
using namespace std;

struct node{ //creating the outline for linked list
    int data;
    node *next;
};

node *createNewNode(int x){ //creating a new node
    node *newnode=new node();
    newnode->data=x;
    newnode->next=nullptr;
    return newnode;
}

class Graph{ //creating the constructor for graph
    int nVertices;
    node **adjacencyList;
//adjacencyList will point to an array of pointers, where
//each pointer points to the head of a linked list
//representing the adjacency list of a vertex in the graph.
    bool directed;
public:
    Graph(int n,bool dir);
    void addEdge(int u,int v);
    bool isEdge(int u,int v);
    void display();
    ~Graph();
};

Graph::Graph(int n,bool dir){
    nVertices=n; //int nVertices
    directed=dir; //bool directed will have the dir=false or true initiated by the user
    adjacencyList=new node *[n]; //node **adjacencyList
//This line dynamically allocates an array of pointers to node objects.
//The new keyword is used to allocate memory dynamically.
//node*[n] indicates that adjacencyList will point to an array of pointers,
//and n is the number of elements in this array.
//Each element of this array is expected to hold the address of a node object.
    for(int i=0;i<nVertices;i++){
        adjacencyList[i]=nullptr;
    }
//This step ensures that each element initially points to nothing,
//indicating that no edges have been added to the graph yet.
}

void Graph::addEdge(int u,int v){
    if(u<0 || u>nVertices || v<0 || v>nVertices){
        return;
    }
    node *n1=createNewNode(v); //adjacencyList=new *node[n]=nullptr was the initial one
    n1->next=adjacencyList[u]; //the nullptr will be after the new addded edge
    adjacencyList[u]=n1; //the vertex head will point to the new added edge

    node *n2=createNewNode(u);
    n2->next=adjacencyList[v];
    adjacencyList[v]=n2;
}

bool Graph::isEdge(int u,int v){ //for initialization we can skip this isEdge part
    node *current=adjacencyList[u]; //will point to the head of the vertex
    for(int i=0;i<nVertices;i++){ 
        if(current->data!=v || current!=nullptr){ //if vertex doesnot point to that other edge or isnt nullptr
            current=current->next;
        }
    }
    if(current==nullptr) return false;
    return true;
}

void Graph::display(){
    cout<<"Printing list:\n";
    for(int i=0;i<nVertices;i++){
        cout<<i<<":"<<"\t"; //this will print the vertex
        node *current=adjacencyList[i]; //head of that particular vertex
        while(current!=nullptr){ //while head isnt null continue
            cout<<current->data<<"\t";
            current=current->next;
        }
        cout<<endl;
    }
}

Graph::~Graph(){ //destructor
    for(int i=0;i<nVertices;i++)
        delete adjacencyList[i];
    delete [] adjacencyList;
}

int main(){
    Graph g(4,false); //undirected with 4 vertices
    g.addEdge(0,1);
    g.addEdge(0,3);
    g.addEdge(1,3);
    g.addEdge(1,2);
    g.display();
    }



//Complete one (in and out)
#include<iostream>
using namespace std;
struct node{
    int data;
    node *next;
};
node *createNewNode(int x){
    node *newNode=new node();
    newNode->data=x;
    newNode->next=NULL;
    return newNode;
}
class Graph{
    int nVertices;
    bool directed;
    node **adjacencyList;
public:
    Graph(int n,bool dir);
    void addEdge(int u,int v);
    int isEdge(int u,int v);
    void display();
    void indegree(int u);
    void outdegree(int u);
    ~Graph();
};

Graph::Graph(int n,bool dir){
    nVertices=n;
    directed=dir;
    adjacencyList=new node *[n];
    for(int i=0;i<nVertices;i++){
        adjacencyList[i]=nullptr;
    }
}
void Graph::addEdge(int u,int v){
    if(u<0 || u>nVertices || v<0 || v>nVertices){
        cout<<"Invalid"<<endl;
    }
    node *n1=createNewNode(v); //adding v to u
    n1->next=adjacencyList[u];
    adjacencyList[u]=n1;
    if(!directed){
        node *n2=createNewNode(u);
        n2->next=adjacencyList[v];
        adjacencyList[v]=n2;
    } 
}

void Graph::display(){
    cout<<endl;
    cout<<"Printing graph:"<<endl;
    for(int i=0;i<nVertices;i++){
        cout<<i<<" : "<<"\t";
    node *current=adjacencyList[i];
    while(current!=nullptr){
        cout<<current->data<<"\t";
        current=current->next;
    }
    cout<<endl;
}
}
void Graph::outdegree(int u){
    node *current=adjacencyList[u];
    cout<<"The outdegree of "<<u<<" is: "<<"\t";
    while(current!=nullptr){
        cout<<current->data<<"\t";
        current=current->next;
    }
}
void Graph::indegree(int u){
    cout<<"The indegree of "<<u<<" is: "<<"\t";
    for(int i=0;i<nVertices;i++){
     node *current=adjacencyList[i];
     while(current!=nullptr){
         if(current->data==u){
             cout<<i<<endl;
         }
         current=current->next;
     }
   }
}
Graph::~Graph(){
    for(int i=0;i<nVertices;i++){
        delete adjacencyList[i];
    delete [] adjacencyList;
}
}
int main(){
    Graph g(4,true); //by that true and false we can dictate the directed and undirected
    g.addEdge(0,1);
    g.addEdge(1,3);
    g.addEdge(3,2);
    g.addEdge(2,0);
    g.indegree(0);
    g.outdegree(0);
    g.display();
}
