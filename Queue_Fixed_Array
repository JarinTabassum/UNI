#include<iostream>
using namespace std;
class Queue{
    int f,r,n,cnt; //front rare n is the size of the queue
    //cnt to see how many elements has been inserted and deleted,it will help us to display the queue as it has the final number of the elements of the queue
    int *q;
public:
    Queue(int n){
        this->n=n;
        q=new int[n];
        f=-1;
        r=-1;
        cnt=0;
    }
    int isEmpty(){
        if(f==-1 && r==-1) return 1;
        return 0;
    }
    void enQ(int x){
        ////when we are adding the first element it will start the journey of both rare and fronts, thats why even tho we may think there is no purpose of isEmpty in enQ,but without this front will be -1 while rare will be 0, and it will never fulfill the rule of queue
        if(isEmpty()){
            f=r=0;
            q[r]=x;
            cnt++;
        }else if((r+1)%n == f){ //if needed explanation is given below
            cout<<"Queue is full"<<endl;
        }else{
            r=(r+1)%n;
            q[r]=x;
            cnt++;
        }
    }
    int deQ(){
        if(isEmpty()){
            cout<<"queue is empty"<<endl;
            return -1;
        }else if(f==r){ //if has only one element
            int x=q[f];
            f=r=-1;
            cnt--;
            return x;

        }else{
            int x=q[f];
            f=(f+1)%n; //if needed explanation is given below
            cnt--;
            return x;
        }
    }
    void display(){
        cout<<"Printing queue:"<<endl;
        int k=f; //as front represents the first element of a queue
        for(int i=0;i<cnt;i++){ //as cnt is the ultimate size of the queue after enQ and deQ
            cout<<q[k]<<"\t";
            k=(k+1)%n;
        }
        cout<<endl;
    }
}; //closing the constructor
int main(){
 Queue q1(3);
 q1.enQ(1);
 q1.enQ(2);
 q1.enQ(3);
 q1.display();
 q1.enQ(4);
 q1.display();
 q1.deQ();
 q1.deQ();
 q1.enQ(4);
 q1.display();
}

//check if full
//(rear + 1) % maxSize == front checks whether the next position after rear in the circular array is equal to the front index. If they are equal, it means that the queue is full, as inserting another element would overwrite the front element, violating the FIFO (First In First Out) property of the queue.


//Using (rear + 1) % Qsize instead of rear++ ensures that the rear index wraps around to the beginning of the array when it reaches the end, maintaining the circular behavior of the queue.

//front=(front+1)%n;
//Using the modulo operator ensures that when the front index reaches the end of the array, it wraps around to the beginning, maintaining the circular behavior of the queue.
