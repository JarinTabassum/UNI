#include<iostream>
using namespace std;
//we don't need any node here so directly go to constructor
class Graph{
    int nVertices;
    bool directed;
    int **adjacencyMatrix;
public:
    Graph(int n,bool dir);
    void addEdge(int u,int v);
    bool isEdge(int u,int v);
    void display();
    ~Graph();
};

Graph::Graph(int n,bool dir){
    nVertices=n;
    directed=dir;
    adjacencyMatrix=new int *[nVertices];
    // Each element of this array will point to an array of integers representing the adjacency matrix of the graph
    for(int i=0;i<nVertices;i++){
        adjacencyMatrix[i]=new int[nVertices];
    }
    //This loop dynamically allocates memory for each row of the adjacency matrix. 
    //It iterates over each element of the adjacencyMatrix array and allocates memory for an array of integers of size nVertices.
    //Each element of adjacencyMatrix now points to an array representing a row of the adjacency matrix.
    for(int i=0;i<nVertices;i++){
        for(int j=0;j<nVertices;j++){
        adjacencyMatrix[i][j]=0;
    }
    }
    //This nested loop initializes each element of the adjacency matrix to 0.
    //It iterates over each row and column of the matrix and sets the value at that position to 0.
    //This step initializes the adjacency matrix to represent a graph with no edges initially.
}

void Graph::addEdge(int u,int v){
    if(u<0 || u>nVertices || v<0 || v>nVertices){
        return;
    }
    adjacencyMatrix[u][v]=1;
    if(!directed){ //undirected
    adjacencyMatrix[v][u]=1;
    }
}

bool Graph::isEdge(int u,int v){
    if(u<0 || u>nVertices || v<0 || v>nVertices){
        return false;
    }
    if(adjacencyMatrix[u][v]==1){
        return true;
    }
    return false;
}

void Graph::display(){
    cout<<"Printing list:"<<endl;
    for(int i=0;i<nVertices;i++){
        cout<<i<<":"<<"\t";
        for(int j=0;j<nVertices;j++){
            if(isEdge(i,j)){ //i=0 , j=0 at the first turn
                cout<<j<<"\t"; //in 0 we will print the j if there edge is present
            }
        }
        cout<<endl;
    }
}

Graph::~Graph(){
    for(int i=0;i<nVertices;i++){
        delete [] adjacencyMatrix [i];
    }
    delete [] adjacencyMatrix;
}

int main(){
    Graph g(4,false); //false=not directed
    g.addEdge(0,2);
    g.addEdge(0,3);
    g.addEdge(1,2);
    g.addEdge(1,3);
    g.display();
}


/*void Graph::indegree(int u){
      cout<<"The indegree of "<<u<<" is: ";
      for(int i=0;i<nVertices;i++){
            if(adjacencyMatrix[i][u]==1){
                  cout<<i<<"\t";
              }
      }
      cout<<endl;
}
void Graph::outdegree(int u){
    cout<<"The outdegree of "<<u<<" is: "<<"\t";
    for(int i=0;i<nVertices;i++){
            if(adjacencyMatrix[u][i]==1){
                cout<<i<<"\t";
            }
    }
    cout<<endl;
} */
