#include<iostream>
using namespace std;
struct node{
    int data;
    node *next;
};
node *createNewNode(int x){
    node *newnode=new node();
    newnode->data=x;
    newnode->next=NULL;
    return newnode;
}
class Stack{
    node *head;
public:
//we have to have a Stack object here, not just the methods
    Stack(){
        head=NULL;
    }
    int isEmpty(){
        if(head==NULL){
            cout<<"There is nothing to delete"<<endl;
            return -1;
        }
        return 0;
    }
    void push(int x){
        //the first element of stack will be the last result
        //so add the newnode at the front so that the previous goes to the last
        node *push_node=createNewNode(x);
        push_node->next=head;
        head=push_node;
    }
    int pop(){
        if(isEmpty()){
            cout<<"There is nothing to delete"<<endl;
            return -1;
        }
        else{
            node *pop_node=head;
            head=head->next;
            //returning the data of pop node here will not make the pop delete and if we do delete we wont have access to return,thats why we have to assign the data to some int first,then we can return it and delete the node
            int x=pop_node->data;
            delete pop_node;
            return x;
        }
    }
    int top(){
        if(isEmpty()){
            cout<<"There is no element to show"<<endl;
        }
        else{
            return head->data;
        }
    }
    void display(){
        node *current=head;
        cout<<"Printing the list:"<<endl;
        while(current!=NULL){
            cout<<current->data<<"\t";
            current=current->next;
        }
        cout<<endl;
    }
};
int main(){
    Stack s;
    s.push(1);
    s.push(2);
    s.push(3);
    s.display();
    s.push(4);
    s.push(5);
    s.display();
    cout<<"The popped element is: "<<s.pop()<<endl;
    s.display();
    s.push(6);
    s.display();
}
